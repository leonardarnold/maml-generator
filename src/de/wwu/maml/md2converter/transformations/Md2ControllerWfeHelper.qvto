library Md2ControllerWfeHelper;

import Md2Helper;
import Md2ModelHelper;
import Md2ViewHelper;

modeltype MAML "strict" uses "http://de/wwu/md2dot0";
modeltype MAMLdata "strict" uses "http://de/wwu/md2dot0data";
modeltype MAMLgui "strict" uses "http://de/wwu/md2dot0gui";
modeltype MD2 "strict" uses "http://www.wwu.de/md2/framework/MD2";

helper Model::distinctWorkflowElements(): Collection(WorkflowElement) {
	log(".distinctWorkflowElements");
	
	// initialize data model
	self.distinctViewElementTypes();
	
	// One MD2-WFE and WFEvent for each MAML-PFE
	self.useCases.processFlowElements[ProcessElement]->forEach(elem){
		elem.toWorkflowElement();
	};
	
	return resolve(WorkflowElement);
}

mapping ProcessElement::toWorkflowEvent(): WorkflowEvent {
	log("..toWorkflowEvent: " + self.description.toName());
	
	name := self.description.toName() + "Event";
}

helper ProcessFlowElement::toWorkflowElement(): WorkflowElement {
	// The real stuff happens in the subtype specific toViewElementContent methods
	log("ERROR: Unhandled process element type in toWorkflowElement: " + self.metaClassName());
	return null;
}

mapping SelectEntity::toWorkflowElement(): WorkflowElement {
	log("..toWorkflowElement: " + self.description.toName());
	// TODO
	name := self.description.toName().addSuffixNumber();
	initActions := self.map toInitAction(); //TODO
	actions := self.map toInitAction(); //TODO
	processChain := self.map toProcessChain(); //TODO
	invoke := null; // Not explicitly modelled in MAML
	defaultProcessChain := self.map toProcessChain(); //TODO	
}

mapping ShowEntity::toWorkflowElement(): WorkflowElement {
	log("..toWorkflowElement: " + self.description.toName());
	// TODO
	name := self.description.toName().addSuffixNumber();
	initActions := self.map toInitAction(); //TODO
	actions := self.map toInitAction(); //TODO
	processChain := self.map toProcessChain(); //TODO
	invoke := null; // Not explicitly modelled in MAML
	defaultProcessChain := self.map toProcessChain(); //TODO	
}

mapping UpdateEntity::toWorkflowElement(): WorkflowElement {
	log("..toWorkflowElement: " + self.description.toName());
	// TODO
	name := self.description.toName().addSuffixNumber();
	initActions := self.map toInitAction(); //TODO
	actions := self.map toInitAction(); //TODO
	processChain := self.map toProcessChain(); //TODO
	invoke := null; // Not explicitly modelled in MAML
	defaultProcessChain := self.map toProcessChain(); //TODO	
}

mapping CreateEntity::toWorkflowElement(): WorkflowElement {
	log("..toWorkflowElement: " + self.description.toName());
	// TODO
	name := self.description.toName().addSuffixNumber();
	initActions := self.map toInitAction(); //TODO
	actions := self.map toInitAction(); //TODO
	processChain := self.map toProcessChain(); //TODO
	invoke := null; // Not explicitly modelled in MAML
	defaultProcessChain := self.map toProcessChain(); //TODO	
}

mapping ProcessElement::toProcessChain(): ProcessChain {
	log("...toProcessChain");
	
	name := "ProcessChain" + self.description.toName();
	processChainSteps := self.toProcessChainSteps();
}

helper ProcessElement::toProcessChainSteps(): ProcessChainStep {
	log("...toProcessChainSteps");
	
	return object ProcessChainStep {
		name := "Step" + self.description.toName();
		view := self.lookupOrCreateViewElement().toReferencedType();// TODO
		gotos := null; // Done via workflow events
		message := null; // Not explicitly modelled in MAML
	};
}

mapping ProcessElement::toInitAction(): CustomAction {
	log("...toInitAction");
	
	name := "initAction" + self.description.toName();
	codeFragments := Set { self.toEventBindingTask() }; // Events
	codeFragments += self.toFieldMappingTasks(); // Mappings
}

helper ProcessElement::toEventBindingTask(): EventBindingTask {
	log("....toEventBindingTask: " + self.toString());
	
	return object EventBindingTask {
		actions := self.map toFireEventAction().toSimpleActionRef();
		events := Set { object ViewElementEventRef {
						referencedField := self.resolveone(Button).toReferencedType();
						event := ElementEventType::ON_CLICK;
					} 
		};
	}
}

helper ProcessElement::toFireEventAction(): FireEventAction {
	return object FireEventAction {
		workflowEvent := self.map toWorkflowEvent();
	}
}

helper ProcessElement::toFieldMappingTasks(): Collection(MappingTask) {
	var fieldAttributes := self.resolveoneIn(ProcessElement::toViewElement).allSubobjectsOfKind(InputElement);
	fieldAttributes->forEach(elem){
		elem.invresolve(Attribute).map toFieldMappingTask(elem, self);
	};
	
	return self.resolve(MappingTask);
}

mapping Attribute::toFieldMappingTask(field : ViewGUIElement, referencedBy : ProcessElement): MappingTask {
	log("....toFieldMappingTask: " + self.toString());

	referencedViewField := field.toReferencedType();
	pathDefinition := referencedBy.dataType.resolveone(MD2::Entity).toContentProviderPath(self, false);
}

helper DataType::toContentProviderOperationActionCreateUpdate(): ContentProviderOperationAction {
	return object ContentProviderOperationAction { 
		operation := AllowedOperation::CREATE_OR_UPDATE; 
		contentProvider := self.resolveone(ContentProvider).toContentProviderReference(); //TODO check
	};
}

helper DataType::toContentProviderOperationActionRead(): ContentProviderOperationAction {
	return object ContentProviderOperationAction { 
		operation := AllowedOperation::READ; 
		contentProvider := self.resolveone(ContentProvider).toContentProviderReference(); //TODO check
	};
}

helper DataType::toContentProviderOperationActionDelete(): ContentProviderOperationAction {
	return object ContentProviderOperationAction { 
		operation := AllowedOperation::DELETE; 
		contentProvider := self.resolveone(ContentProvider).toContentProviderReference(); //TODO check
	};
}

helper DataType::toContentProviderResetAction(): ContentProviderResetAction {
	return object ContentProviderResetAction { 
		contentProvider := self.resolveone(ContentProvider).toContentProviderReference(); //TODO check
	};
}

helper MD2::SimpleAction::toSimpleActionRef(): SimpleActionRef {
	return object SimpleActionRef { action := self; };
}