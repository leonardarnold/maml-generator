library Md2ControllerWfeHelper;

import Md2Helper;
import Md2ModelHelper;
import Md2ViewHelper;

modeltype MAML "strict" uses "http://de/wwu/md2dot0";
modeltype MAMLdata "strict" uses "http://de/wwu/md2dot0data";
modeltype MAMLgui "strict" uses "http://de/wwu/md2dot0gui";
modeltype MD2 "strict" uses "http://www.wwu.de/md2/framework/MD2";

helper Model::distinctWorkflowElements(): Collection(WorkflowElement) {
	log(".distinctWorkflowElements");
	
	// initialize data model
	self.distinctViewElementTypes();
	
	// One MD2-WFE and WFEvent for each MAML-PFE
	self.useCases.processFlowElements[ProcessElement]->forEach(elem){
		elem.toWorkflowElement();
	};
	
	return resolve(WorkflowElement);
}

mapping ProcessElement::toWorkflowEvent(): WorkflowEvent {
	log("..toWorkflowEvent: " + self.description.toName());
	
	name := self.description.toName() + "Event";
}

helper ProcessFlowElement::toWorkflowElement(): WorkflowElement {
	switch {
		case (self.oclIsKindOf(SelectEntity)) return self.oclAsType(SelectEntity).map toWorkflowElement();
		case (self.oclIsKindOf(ShowEntity)) return self.oclAsType(ShowEntity).map toWorkflowElement();
		// TODO others
		// Skip Start/End Events and data sources
	};
	return null;
}

mapping SelectEntity::toWorkflowElement(): WorkflowElement {
	log("..toWorkflowElement: " + self.description.toName());
	// TODO
	name := self.description.toName().addSuffixNumber();
	initActions := self.map toInitAction(); //TODO
	actions := self.map toInitAction(); //TODO
	processChain := self.map toProcessChain(); //TODO
	invoke := null; // Not explicitly modelled in MAML
	defaultProcessChain := self.map toProcessChain(); //TODO	
}

mapping ShowEntity::toWorkflowElement(): WorkflowElement {
	log("..toWorkflowElement: " + self.description.toName());
	// TODO
	name := self.description.toName().addSuffixNumber();
	initActions := self.map toInitAction(); //TODO
	actions := self.map toInitAction(); //TODO
	processChain := self.map toProcessChain(); //TODO
	invoke := null; // Not explicitly modelled in MAML
	defaultProcessChain := self.map toProcessChain(); //TODO	
}

mapping ProcessElement::toProcessChain(): ProcessChain {
	log("...toProcessChain");
	
	name := self.description.toName() + "ProcessChain".addSuffixNumber();
	processChainSteps := self.map toProcessChainSteps(); // TODO
}

mapping ProcessElement::toProcessChainSteps(): ProcessChainStep {
	log("...toProcessChainSteps");
	
	name := self.description.toName() + "Step".addSuffixNumber();
	view := self.lookupOrCreateViewElement().map toReferencedType();// TODO
	gotos := null; // Done via workflow events
	message := null; // Not explicitly modelled in MAML
}

mapping ProcessElement::toInitAction(): CustomAction {
	log("...toProcessChainSteps");
	
	name := "testAction".addSuffixNumber(); // TODO
	codeFragments := Set { self.map toEventBindingTask() };
}

mapping ProcessElement::toEventBindingTask(): EventBindingTask {
	actions := self.map toFireEventAction().map toSimpleActionRef();
	events := Set { object GlobalEventRef { GlobalEventType::ON_CONNECTION_LOST } }; //TODO
}

mapping ProcessElement::toFireEventAction(): FireEventAction {
	workflowEvent := self.map toWorkflowEvent();
}

mapping MD2::SimpleAction::toSimpleActionRef(): SimpleActionRef {
	action := self;
}