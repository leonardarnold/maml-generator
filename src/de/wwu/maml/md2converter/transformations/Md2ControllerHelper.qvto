library Md2ControllerHelper;

import Md2Helper;
import Md2ModelHelper;

modeltype MAML "strict" uses "http://de/wwu/md2dot0";
modeltype MAMLdata "strict" uses "http://de/wwu/md2dot0data";
modeltype MAMLgui "strict" uses "http://de/wwu/md2dot0gui";
modeltype MD2 "strict" uses "http://www.wwu.de/md2/framework/MD2";

helper Model::distinctContentProviders(): Collection(ContentProvider) {
	// initialize data model
	self.distinctModelElements();
	
	self.useCases.dataTypes[CustomType]->forEach(entity) {
		entity.map toContentProvider(self, false); // prepare a single-element CP
		entity.map toContentProvider(self, true); // prepare a multi-element CP 
	};
	
	return resolve(ContentProvider);
}

mapping CustomType::toContentProvider(rootModel : Model, multivalued : Boolean): ContentProvider { // TODO mapping schlecht
	log(".toContentProvider: " + self.name);
	
	var nameExt := "";
	if(multivalued = true) then { nameExt := "Many" } endif;
	
	type := self.resolveone(Entity).toReferencedModelType(multivalued);
	name := self.name.toFirstUpper() + "Provider" + nameExt;
	_default := false; // Not explicitly modelled in MAML
	local:= false; // TODO
	connection := resolveone(conn : RemoteConnection | conn.name = rootModel.getDefaultConnectionName());
	filter := false; // Not explicitly modelled in MAML
	filterType := null; // Not explicitly modelled in MAML
	whereClause := null; // Not explicitly modelled in MAML
	_readonly := false; // Not explicitly modelled in MAML
}

helper MD2::Entity::toContentProviderPath(attribute : MAMLgui::Attribute): ContentProviderPath {
	log("...toContentProviderPath: From " + self.name + " to " + attribute.description);
	
	var provider := resolveone(cp : ContentProvider | cp.type.oclAsType(ReferencedModelType).entity.name = self.oclAsType(Entity).name);
	var providerEntity := provider.type.oclAsType(ReferencedModelType).entity.oclAsType(Entity); 
	
	return object ContentProviderPath {
		contentProviderRef := provider;
		tail := providerEntity.getPathToAttribute(attribute.getAttribute())->toContentProviderPathTail();
	}
}

helper Sequence(MD2::Attribute)::toContentProviderPathTail(): PathTail {
	if(self->size() > 1) then {
		return object PathTail {
			attributeRef := self->first();
			tail := self->excluding(self->first())->toContentProviderPathTail();
		};
	} else {
		return object PathTail {
			attributeRef := self->first();
		};
	} endif;
}

helper ContentProvider::toContentProviderReference(): ContentProviderReference {
	return object ContentProviderReference { 
		contentProvider := self;
	};
}
