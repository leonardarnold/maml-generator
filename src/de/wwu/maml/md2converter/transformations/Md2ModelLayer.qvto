import Md2Helper;

modeltype MAML "strict" uses "http://de/wwu/md2dot0";
modeltype MAMLdata "strict" uses "http://de/wwu/md2dot0data";
modeltype MD2 "strict" uses "http://www.wwu.de/md2/framework/MD2";

transformation Md2ModelLayerTransformation(in Source: MAML, out Target: MD2);

main() {
	Source.rootObjects()[Model] -> map toModelLayer();
}

mapping Model::toModelLayer(): MD2Model {
	log("toModelLayer");
	
	package := self.map toPackage();
	modelLayer := self.map toModel();
}

mapping Model::toPackage(): PackageDefinition {
	log(".toPackage");
	
	pkgName := safeVal(self.projectName, DEFAULT_PROJECT_NAME).toFirstUpper() + ".models";
}

mapping Model::toModel(): MD2::Model {
 	self.distinctModelElements();
	modelElements := late resolve(ModelElement);
}

helper Model::distinctModelElements(): Set(ModelElement) {
	log(".distinctModelElements");
	
	// Custom types
	self.useCases->forEach(uc) {
		uc.dataTypes->forEach(dataType){
			dataType->oclAsType(DataType).lookupOrCreate();
		};
	};

	return null;
}

helper DataType::lookupOrCreate(): ModelElement {
	if(resolveone(dataType : ModelElement | dataType.name = self.metaClassName().toFirstUpper()) <> null) then {
		return resolveone(dataType : ModelElement | dataType.name = self.metaClassName().toFirstUpper());
	} endif;
	return self.toModelElement();
}

helper DataType::toModelElement(): ModelElement {
	var element : Entity;
	
	switch {
		case (self.oclIsTypeOf(CustomType)) element := self.oclAsType(CustomType).map toEntity();
		// TODO collection, enum
		else return null; // Skip data type literals
	};
	
	return element;
}

mapping CustomType::toEntity(): Entity when {self.attributes->size() > 0} {
	log("..toEntity: " + self.name.toFirstUpper());
	
	name := self.name.toFirstUpper();
	attributes := self.attributes->toPrimitiveOrComplexAttribute();
}

mapping _Collection::toEntity(): Entity {
	log("..toEntity: " + self.metaClassName().toFirstUpper());
	
	name := self.metaClassName().toFirstUpper();
	attributes := null;
}

mapping DataType::toEnum(): Enum {
	log("..toEnum: " + self.metaClassName().toFirstUpper());
	//TODO
}

helper MAMLdata::Attribute::toPrimitiveOrComplexAttribute(): MD2::Attribute {
	log("...toPrimitiveOrComplexAttributeType: Attribute " + self.name);
	
	return object MD2::Attribute {
		name := self.name.toFirstLower();
		type := self.type.toPrimitiveOrComplexAttributeType();
	} 
}

helper DataType::toPrimitiveOrComplexAttributeType(): MD2::AttributeType {
	switch {
		// Primitive conversion
		case (self.oclIsTypeOf(_Integer)) return self.oclAsType(_Integer).map toPrimitiveInt();
		case (self.oclIsTypeOf(Float)) return self.oclAsType(Float).map toPrimitiveFloat();
		case (self.oclIsTypeOf(_String)) return self.oclAsType(_String).map toPrimitiveString();
		case (self.oclIsTypeOf(_Boolean)) return self.oclAsType(_Boolean).map toPrimitiveBoolean();
		case (self.oclIsTypeOf(Date)) return self.oclAsType(Date).map toPrimitiveDate();
		case (self.oclIsTypeOf(Time)) return self.oclAsType(Time).map toPrimitiveTime();
		case (self.oclIsTypeOf(DateTime)) return self.oclAsType(DateTime).map toPrimitiveDateTime();
		case (self.oclIsTypeOf(File)) return self.oclAsType(File).map toPrimitiveFile();
		// MAML primitives to MD2 non-primitives
		case (self.oclIsTypeOf(PhoneNumber)) return self.oclAsType(PhoneNumber).map toPrimitiveString();
		case (self.oclIsTypeOf(Url)) return self.oclAsType(Url).map toPrimitiveString();
		case (self.oclIsTypeOf(Email)) return self.oclAsType(Email).map toPrimitiveString();
		// Complex types
		case (self.oclIsTypeOf(CustomType)) return self.oclAsType(CustomType).toReferencedType();
		// TODO collection, enum
		else return null;
	};
}

mapping _Integer::toPrimitiveInt(): IntegerType {
	log("....toPrimitiveInt");
	
	object result: IntegerType {
			many := false; // TODO
			// TODO params 
	} 
}

mapping Float::toPrimitiveFloat(): FloatType {
	log("....toPrimitiveFloat");
	
	object result: FloatType {
			many := false; // TODO
			// TODO params 
	} 
}

mapping _String::toPrimitiveString(): StringType {
	log("....toPrimitiveString");
	
	object result: StringType {
			many := false; // TODO
			// TODO params 
	} 
}

mapping PhoneNumber::toPrimitiveString(): StringType {
	log("....toPrimitiveString");
	
	object result: StringType {
			many := false; // TODO
			// TODO params 
	} 
}

mapping Url::toPrimitiveString(): StringType {
	log("....toPrimitiveString");
	
	object result: StringType {
			many := false; // TODO
			// TODO params 
	} 
}

mapping Email::toPrimitiveString(): StringType {
	log("....toPrimitiveString");
	
	object result: StringType {
			many := false; // TODO
			// TODO params 
	} 
}

mapping _Boolean::toPrimitiveBoolean(): BooleanType {
	log("....toPrimitiveBoolean");
	
	object result: BooleanType {
			many := false; // TODO
			// TODO params 
	} 
}

mapping Date::toPrimitiveDate(): DateType {
	log("....toPrimitiveDate");
	
	object result: DateType {
			many := false; // TODO
			// TODO params 
	} 
}

mapping Time::toPrimitiveTime(): TimeType {
	log("....toPrimitiveTime");
	
	object result: TimeType {
			many := false; // TODO
			// TODO params 
	} 
}

mapping DateTime::toPrimitiveDateTime(): DateTimeType {
	log("....toPrimitiveDateTime");
	
	object result: DateTimeType {
			many := false; // TODO
			// TODO params 
	} 
}

mapping File::toPrimitiveFile(): FileType {
	log("....toPrimitiveFile");
	
	object result: FileType {
			many := false; // TODO
			// TODO params 
	} 
}

helper DataType::toReferencedType(): ReferencedType {
	// wrapper to find or create modelElement and reference it
	return self.lookupOrCreate().map toReferencedType();
}

mapping MD2::ModelElement::toReferencedType(): ReferencedType {
	element := self;
}


mapping MAMLdata::Attribute::toAttribute(): MD2::Attribute {
	log("...toAttribute: " + self.name.toFirstLower());
	
	name := self.name.toFirstLower();
	type := self.type.toReferencedType();
	extendedName := null; // Not explicitly modelled in MAML
	description := null; // Not explicitly modelled in MAML
}
