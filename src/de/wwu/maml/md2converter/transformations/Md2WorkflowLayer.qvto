import Md2Helper;
import Md2ControllerHelper;
import Md2ControllerWfeHelper;

modeltype MAML "strict" uses "http://de/wwu/md2dot0";
modeltype MD2 "strict" uses "http://www.wwu.de/md2/framework/MD2";

transformation Md2WorkflowLayerTransformation(in Source: MAML, out Target: MD2);

main() {
	Source.rootObjects()[Model] -> map toWorkflowLayer();
}

mapping Model::toWorkflowLayer(): MD2Model {
	log("toWorkflowLayer");
	
	package := self.map toPackage();
	modelLayer := self.map toWorkflow();
}

mapping Model::toPackage(): PackageDefinition {
	log(".toPackage");
	
	pkgName := safeVal(self.projectName, DEFAULT_PROJECT_NAME).toFirstUpper() + ".workflows";
}

mapping Model::toWorkflow(): Workflow {
	workflowElementEntries := self.toWorkflowElementEntries();
	apps := self.toApps();
}

helper Model::toWorkflowElementEntries(): Collection(WorkflowElementEntry) {
	log(".toWorkflowElementEntries");
	
	var entries: Collection(WorkflowElementEntry) := Set {};
	
	self.distinctWorkflowElements(); // initialize controller layer

	self.useCases.processFlowElements->forEach(elem) {
		if(elem.oclIsTypeOf(ProcessElement)) then {
			entries += elem.oclAsType(ProcessElement).map toWorkflowElementEntry();
		} endif;
	};
	
	return entries;
}

mapping ProcessElement::toWorkflowElementEntry(): WorkflowElementEntry {
	workflowElement := resolveone(elem : WorkflowElement | elem.name = self.description);
	invokable := self.isWorkflowElementInvokable();
	eventDesc := safeVal(self.container().oclAsType(UseCase).title, self.description, "");
	firedEvents := self.toFiredEvents();
}

query ProcessElement::isWorkflowElementInvokable(): Boolean {
	if(self.previousElements->size() = 1 and self.previousElements->first().sourceProcessFlowElement.oclIsTypeOf(ProcessStartEvent)) then { // allow XOR as first element??
		return true;
	} endif;
	return false;
}

helper ProcessElement::toFiredEvents(): Collection(FireEventEntry) {
	if(self.getNextProcessElements()->size() = 0) then {
		// No follower -> end process
		return self.map toEndEvent();
	} else {
		// Fire event for each potentially following process element
		return self.getNextProcessElements()->map toFiredEvent(self);
	} endif;
}

query ProcessElement::getNextProcessElements(): Collection(ProcessElement) {
	if(self.nextElements->size() = 0) then {
		return Set {};
	} endif;
	
	var collect : Collection(ProcessElement) := OrderedSet {};
	
	// TODO Error process flows?
	self.nextElements.targetProcessFlowElement->forEach(elem) {
		if(self.oclIsKindOf(ProcessElement)) then {
			collect += elem.oclAsType(ProcessElement);
		} else {
			// Else no real process element, e.g. end, xor, datasource -> get transitive follower
			collect += elem.oclAsType(ProcessElement).getNextProcessElements();
		} endif;
	};

	return collect;
}

mapping ProcessElement::toFiredEvent(origin : ProcessElement): FireEventEntry {
	event := origin.resolveone(WorkflowEvent);
	startedWorkflowElement := self;
	endWorkflow := false;
}

mapping ProcessElement::toEndEvent(): FireEventEntry {
	event := self.resolveone(WorkflowEvent);
	endWorkflow := true;
}

helper Model::toApps(): Collection(App) {
	return self.roles->map toApp(); // TODO existiert attribut und ist gesetzt?
}

mapping Role::toApp(): App {
	name := safeVal(self.projectName, DEFAULT_PROJECT_NAME).toFirstUpper() + "_" + safeVal(self.name);
	workflowElements := self.getWorkflowElements()->map toWorkflowElementReference();
	defaultConnection := null; // TODO
	appName := safeVal(self.projectName, DEFAULT_PROJECT_NAME).toFirstUpper() + " (" + safeVal(role.name) + ")"
}

query Role::getWorkflowElements(): Collection(WorkflowElement) {
	return null; //TODO
}

mapping WorkflowElement::toWorkflowElementReference(): WorkflowElementReference {
	workflowElementReference := self;
	startable := self.isStartable();
	if(self.isStartable()) then {
		alias := safeVal(self.getUseCase().title);
	} endif;
}

query WorkflowElement::isStartable(): Boolean {
	return true; //TODO
}

query WorkflowElement::getUseCase(): UseCase {
	var pe : ProcessElement := self.invresolveone(ProcessElement);
	return pe.container().oclAsType(UseCase);
}