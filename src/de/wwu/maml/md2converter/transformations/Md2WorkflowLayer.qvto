import Md2Helper;
import Md2ControllerHelper;

modeltype MAML "strict" uses "http://de/wwu/md2dot0";
modeltype MD2 "strict" uses "http://www.wwu.de/md2/framework/MD2";

transformation Md2WorkflowLayerTransformation(in Source: MAML, out Target: MD2);

main() {
	Source.rootObjects()[Model] -> map toWorkflowLayer();
}

mapping Model::toWorkflowLayer(): MD2Model {
	log("toWorkflowLayer");
	
	package := self.map toPackage();
	modelLayer := self.map toWorkflow();
}

mapping Model::toPackage(): PackageDefinition {
	log(".toPackage");
	
	pkgName := safeVal(self.projectName, DEFAULT_PROJECT_NAME).toFirstUpper() + ".workflows";
}

mapping Model::toWorkflow(): Workflow {
	workflowElementEntries := null;//TODO
	apps := null;//TODO
}

helper Model::toWorkflowElementEntries(): Collection(WorkflowElementEntry) {
	log(".toWorkflowElementEntries");
	
	var elements : Collection(WorkflowElement) := self.distinctWorkflowElements(); // initialize controller layer
	elements->forEach(elem) {
		elem.map toWorkflowElementEntry();
	}
}

mapping WorkflowElement::toWorkflowElementEntry(): WorkflowElementEntry {
	workflowElement := self;
	invokable := self.isWorkflowElementInvokable();
	eventDesc := safeVal(self.container().oclAsType(UseCase).description, self.description, "");
}

query WorkflowElement::isWorkflowElementInvokable(): Boolean {
	if(self.previousElements->size() = 1 and self.previousElements->first()->oclisTypeOf(StartEvent)) then { // allow XOR as first element??
		return true;
	} endif;
	return false;
}