library Md2ViewHelper;

import Md2Helper;
import Md2ControllerHelper;

modeltype MAML "strict" uses "http://de/wwu/md2dot0";
modeltype MAMLdata "strict" uses "http://de/wwu/md2dot0data";
modeltype MAMLgui "strict" uses "http://de/wwu/md2dot0gui";
modeltype MD2 "strict" uses "http://www.wwu.de/md2/framework/MD2";

helper Model::distinctViewElementTypes(): Collection(ViewElementType) {
	log(".distinctViewElements");
	
	// initialize controller layer
	self.distinctContentProviders();
	
	return self.useCases.processFlowElements[ProcessElement]->oclAsType(ProcessElement).lookupOrCreateViewElement();
}

helper ProcessElement::lookupOrCreateViewElement(): ViewElementType {
	if(resolveone(ve : ViewElementType | ve.name = self.metaClassName().toFirstUpper()) <> null) then {
		return resolveone(ve : ViewElementType | ve.name = self.metaClassName().toFirstUpper());
	} endif;
	return self.map toViewElement();
}

mapping ProcessElement::toViewElement(): FlowLayoutPane {
	log("..toViewElement: " + self.metaClassName() + "View");
	
	name := self.metaClassName() + "View".addSuffixNumber();
	params := map getFlowDirectionParam(true);
	elements := self.toViewElementContent();
}

mapping getFlowDirectionParam(vertical : Boolean): FlowLayoutPaneFlowDirectionParam {
	init {
		var direction : FlowDirection := FlowDirection::VERTICAL;
		if(not vertical) then {
			direction := FlowDirection::HORIZONTAL;
		} endif;
	}
	
	object result: FlowLayoutPaneFlowDirectionParam {
		flowDirection := direction;
	}
}

mapping MD2::ViewElementType::toReferencedType(): AbstractViewGUIElementRef {
	ref := self;
	tail := null; // TODO/necessary for MAML?
}

helper ProcessElement::toViewElementContent(): Collection(ViewGUIElement){
	// Different representation per ProcessElement type //TODO switch selectEntity...
	switch {
		case (self.oclIsTypeOf(SelectEntity)) return self.oclAsType(SelectEntity).map toViewElementContent();
	};
	return null;//self.getAttachedParameters()->toContentElement(); 
}

helper SelectEntity::toViewElementContent(): Collection(ViewGUIElement){
	var content : OrderedSet(ViewGUIElement) := OrderedSet { self.map toTitle() }; // Title 
	content += self.getAttachedLabels().map toLabel(); // Labels
	content += self->map toTable(self.getAttachedAttributes()); // Table (ideally)
	content += OrderedSet { self.map toContinueButton() }; // Button
	return content;
}

helper ShowEntity::toViewElementContent(): Collection(ViewGUIElement){
	var content : OrderedSet(ViewGUIElement) := OrderedSet { self.map toTitle() }; // Title 
	content += self.getAttachedParameters().toViewElements(); // Fields
	content += OrderedSet { self.map toContinueButton() }; // Button
	return content->flatten();
}

helper ParameterConnector::toViewElements(): Collection(ViewGUIElement){
	log("...toTitle");
	
	switch {
		case (self.targetElement.oclIsTypeOf(Label)) return OrderedSet { self.map toLabel() };
		case (self.targetElement.oclIsTypeOf(Attribute) and self.accessType = AccessType::READ) return OrderedSet { self.map toReadAttribute() };
		case (self.targetElement.oclIsTypeOf(Attribute) and self.accessType = AccessType::WRITE) return OrderedSet { self.map toWriteAttribute() }->flatten();
		// TODO more variants: label, computed, ...
	};
	
	return Set {};
}

mapping ProcessElement::toTitle(): MD2::Label {
	log("...toTitle");
	
	object result: MD2::Label {
		name := "title".addSuffixNumber();
		text := self.description;
		width := 100;
		style := null; // TODO heading style?
	}
} 

mapping ParameterConnector::toLabel(): MD2::Label {
	log("...toLabel");
	
	object result: MD2::Label {
		name := "label".addSuffixNumber();
		text := self.description;
		width := 100;
		style := null; // TODO label style?
	}
} 

mapping ProcessElement::toContinueButton(): MD2::Button {
	log("...toContinueButton");
	
	name := "button".addSuffixNumber();
	text := self.getContinueButtonText(1);
	width := 100;
	style := null; // TODO button style?
} 

mapping ProcessElement::toTable(attributes : Collection(ParameterConnector)): MD2::EntitySelector {
	log("...toTable");
	
	name := "table".addSuffixNumber();
	textProposition := self.dataType.lookupOrCreate().toContentProviderPath(attributes->asOrderedSet()->first()); // TODO fix
}

mapping ParameterConnector::toReadAttribute(): FlowLayoutPane {
	log("...toReadAttribute");
	
	name := "attributePane".addSuffixNumber();
	elements := OrderedSet { self.map toAttributeLabel() , self.map toReadAttributeField() };
	params := map getFlowDirectionParam(false);
}

mapping ParameterConnector::toAttributeLabel(): MD2::Label {
	name := "attributeLabel".addSuffixNumber();
	text := self.description;
	width := 40;
	style := null; // TODO label style?
}

mapping ParameterConnector::toReadAttributeField(): MD2::Label {
	name := "attributeField".addSuffixNumber();
	text := safeVal(self.targetElement.description, "");
	width := 60;
	style := null; // TODO label style?
}

helper ParameterConnector::toWriteAttribute(): OrderedSet(ViewGUIElement) {
	var attribute : MAMLgui::Attribute := self.targetElement.oclAsType(MAMLgui::Attribute); 
	
	switch {
		//TODO more
		case (attribute.type.oclIsTypeOf(_String)) return OrderedSet { attribute.map toTextInput() };
		case (attribute.type.oclIsTypeOf(Integer)) return OrderedSet { attribute.map toIntegerInput() };		
		case (attribute.type.oclIsTypeOf(Float)) return OrderedSet { attribute.map toNumberInput() };
	//	case (self.oclIsTypeOf(_Boolean)) return self.oclAsType(_Boolean).map toPrimitiveBoolean(isCollection);
	//	case (self.oclIsTypeOf(Date)) return self.oclAsType(Date).map toPrimitiveDate(isCollection);
	//	case (self.oclIsTypeOf(Time)) return self.oclAsType(Time).map toPrimitiveTime(isCollection);
	//	case (self.oclIsTypeOf(DateTime)) return self.oclAsType(DateTime).map toPrimitiveDateTime(isCollection);
	//	case (self.oclIsTypeOf(File)) return self.oclAsType(File).map toPrimitiveFile(isCollection);
		// MAML primitives to MD2 non-primitives
	//	case (self.oclIsTypeOf(PhoneNumber)) return self.oclAsType(PhoneNumber).map toPrimitiveString(isCollection);
	//	case (self.oclIsTypeOf(Url)) return self.oclAsType(Url).map toPrimitiveString(isCollection);
	//	case (self.oclIsTypeOf(Email)) return self.oclAsType(Email).map toPrimitiveString(isCollection);
		// Complex types
	//	case (self.oclIsTypeOf(CustomType)) return self.oclAsType(CustomType).toReferencedType(isCollection);
	//	case (self.oclIsTypeOf(_Collection)) return self.oclAsType(_Collection).type.toPrimitiveOrComplexAttributeType(true);
	//	case (self.oclIsTypeOf(Enum)) return self.oclAsType(Enum).toReferencedType(isCollection);
		
		else return OrderedSet { attribute.map toTextInput() };
	};
	return OrderedSet{};
}

mapping MAMLgui::Attribute::toTextInput(): TextInput {
	name := "writeAttribute".addSuffixNumber();
	width := 100;
	labelText := self.description;
	tooltipText := self.description; // makes sense for Android?
	isDisabled := false;
	type := TextInputType::INPUT; //TODO textarea
	defaultValue := "";
} 

mapping MAMLgui::Attribute::toIntegerInput(): IntegerInput {
	name := "writeAttribute".addSuffixNumber();
	width := 100;
	labelText := self.description;
	tooltipText := self.description; // makes sense for Android?
	isDisabled := false;
	type := IntegerInputType::DEFAULT;
	defaultValue := 0;
}

mapping MAMLgui::Attribute::toNumberInput(): NumberInput {
	name := "writeAttribute".addSuffixNumber();
	width := 100;
	labelText := self.description;
	tooltipText := self.description; // makes sense for Android?
	isDisabled := false;
	type := NumberInputType::DEFAULT;
	defaultValue := 0;
}

mapping MAMLgui::Attribute::toBooleanInput(): BooleanInput {
	name := "writeAttribute".addSuffixNumber();
	width := 100;
	labelText := self.description;
	tooltipText := self.description; // makes sense for Android?
	isDisabled := false;
	type := BooleanInputType::DEFAULT;
	defaultValue := 'false';
}

helper ProcessElement::getAttachedParameters(): Set(MAML::ParameterConnector) {
	var useCase: UseCase := self.container().oclAsType(UseCase);
	
	return useCase.processFlowConnections[ParameterConnector]
		->select(conn : ParameterConnector | conn.sourceElement = self)
		->sortedBy(conn : ParameterConnector | conn.order);
}

helper ProcessElement::getAttachedLabels(): Set(MAML::ParameterConnector) {
	return self.getAttachedParameters()
		->select(conn : ParameterConnector | conn.targetElement.oclIsTypeOf(MAMLgui::Label));
}

helper ProcessElement::getAttachedAttributes(): Set(MAML::ParameterConnector) {
	return self.getAttachedParameters()
		->select(conn : ParameterConnector | conn.targetElement.oclIsTypeOf(MAMLgui::Attribute));
}

helper ProcessElement::getAttachedAbstractAttributes(): Set(MAML::ParameterConnector) {
	return self.getAttachedParameters()
		->select(conn : ParameterConnector | conn.targetElement.oclIsKindOf(MAMLgui::AbstractAttribute));
}

helper ProcessElement::getContinueButtonText(atPosition : Integer): String {
	if(self.nextElements->size() >= atPosition){
		return safeVal(self.nextElements->at(atPosition).description, DEFAULT_BUTTON_TEXT);
	} endif;
	return null;
	// TODO Finish at last step
}