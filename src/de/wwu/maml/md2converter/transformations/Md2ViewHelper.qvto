library Md2ViewHelper;

import Md2Helper;
import Md2ControllerHelper;

modeltype MAML "strict" uses "http://de/wwu/md2dot0";
modeltype MAMLdata "strict" uses "http://de/wwu/md2dot0data";
modeltype MAMLgui "strict" uses "http://de/wwu/md2dot0gui";
modeltype MD2 "strict" uses "http://www.wwu.de/md2/framework/MD2";

helper Model::distinctViewElementTypes(): Collection(ViewElementType) {
	log(".distinctViewElements");
	
	// initialize controller layer
	self.distinctContentProviders();
	
	return self.useCases.processFlowElements[ProcessElement]->oclAsType(ProcessElement).lookupOrCreateViewElement();
}

helper ProcessElement::lookupOrCreateViewElement(): ViewElementType {
	if(resolveone(ve : ViewElementType | ve.name = self.metaClassName().toFirstUpper()) <> null) then {
		return resolveone(ve : ViewElementType | ve.name = self.metaClassName().toFirstUpper());
	} endif;
	return self.map toViewElement();
}

mapping ProcessElement::toViewElement(): FlowLayoutPane {
	log("..toViewElement: " + self.metaClassName() + "View");
	
	name := self.metaClassName() + "View".addSuffixNumber();
	params := map getVerticalFlowDirectionParam();
	elements := self.toViewElementContent();
}

mapping getVerticalFlowDirectionParam(): FlowLayoutPaneFlowDirectionParam {
	object result: FlowLayoutPaneFlowDirectionParam {
		flowDirection := FlowDirection::VERTICAL;
	}
}

mapping MD2::ViewElementType::toReferencedType(): AbstractViewGUIElementRef {
	ref := self;
	tail := null; // TODO/necessary for MAML?
}

helper ProcessElement::toViewElementContent(): Collection(ViewGUIElement){
	// Different representation per ProcessElement type //TODO switch selectEntity...
	switch {
		case (self.oclIsTypeOf(SelectEntity)) return self.oclAsType(SelectEntity).map toViewElementContent();
	};
	return null;//self.getAttachedParameters()->toContentElement(); 
}

helper SelectEntity::toViewElementContent(): Collection(ViewGUIElement){
	var content : Collection(ViewGUIElement) := Set { self.map toTitle() }; // Title 
	content += self.getAttachedLabels().map toLabel(); // Labels
	content += self->map toTable(self.getAttachedAttributes()); // Table (ideally)
	content += Set { self.map toContinueButton() };
		// Button
	return content;
}

mapping ProcessElement::toTitle(): MD2::Label {
	log("...toTitle");
	
	object result: MD2::Label {
		name := "title".addSuffixNumber();
		text := self.description;
		width := 100;
		style := null; // TODO heading style?
	}
} 

mapping ParameterConnector::toLabel(): MD2::Label {
	log("...toLabel");
	
	object result: MD2::Label {
		name := "label".addSuffixNumber();
		text := self.description;
		width := 100;
		style := null; // TODO label style?
	}
} 

mapping ProcessElement::toContinueButton(): MD2::Button {
	log("...toContinueButton");
	
	name := "button".addSuffixNumber();
	text := self.getContinueButtonText(0);
	width := 100;
	style := null; // TODO button style?
} 

mapping ProcessElement::toTable(attributes : Collection(ParameterConnector)): MD2::EntitySelector {
	log("...toTable");
	
	name := "table".addSuffixNumber();
	textProposition := self.dataType.lookupOrCreate().map toContentProviderPath(attributes->asOrderedSet()->first()); // TODO fix
}

helper ProcessElement::getAttachedParameters(): Set(MAML::ParameterConnector) {
	var useCase: UseCase := self.container().oclAsType(UseCase);
	
	return useCase.processFlowConnections[ParameterConnector]
		->select(conn : ParameterConnector | conn.sourceElement = self)
		->sortedBy(conn : ParameterConnector | conn.order);
}

helper ProcessElement::getAttachedLabels(): Set(MAML::ParameterConnector) {
	return self.getAttachedParameters()
		->select(conn : ParameterConnector | conn.targetElement.oclIsTypeOf(MAMLgui::Label));
}

helper ProcessElement::getAttachedAttributes(): Set(MAML::ParameterConnector) {
	return self.getAttachedParameters()
		->select(conn : ParameterConnector | conn.targetElement.oclIsTypeOf(MAMLgui::Attribute));
}

helper ProcessElement::getAttachedAbstractAttributes(): Set(MAML::ParameterConnector) {
	return self.getAttachedParameters()
		->select(conn : ParameterConnector | conn.targetElement.oclIsKindOf(MAMLgui::AbstractAttribute));
}

helper ProcessElement::getContinueButtonText(atPosition : Integer): String {
	if(self.nextElements->size() > atPosition){
		return safeVal(self.nextElements->at(atPosition).description, DEFAULT_BUTTON_TEXT);
	} endif;
	return null;
	// TODO Finish at last step
}